#!/bin/sh

# deploy-hs

# if database parameter passed in, check to make sure it exists
if [ $1 ];
    then
        echo "*** checking for existance of ${1} ***"
        if [ -e $1 ];
            then
                echo "*** using database ${1} ***";
            else
                echo "*** ${1} not found ***"
                exit;
        fi
    else
        echo "*** using database pg.development.sql ***";
fi

# check version of Docker for use of exec command
DOCKER_VER=$(docker version | grep 'Client version' | cut -d ' ' -f 3)

if [[ $DOCKER_VER < '1.3.0' ]];
    then
        echo "*** Please update your installation of Docker to version >= 1.3.0 ***"
        docker version
        exit;
    else
        echo "*** Docker version ${DOCKER_VER} is compliant with this script ***"
        docker version;
fi

# get submodules
echo "*** get git submodules ***"
git submodule init && git submodule update

# build hs_base if it does not exist
IID=$(docker images | grep hs_base | tr -s ' ' | cut -d ' ' -f 3)
if [ -z $IID ];
    then
        echo "*** pull hs_base image from docker hub ***"
        docker pull mjstealey/hs_base;
    else
        echo "*** hs_base already exists ***";
fi

# build docker contaiers defined by fig or docker-compose and bring them up
FIG_VER=$(fig --version)
DC_VER=$(docker-compose --version)
if [ ${#FIG_VER} -gt 0 ];
then
    echo "*** found ${FIG_VER} installed ***"
    echo "*** build docker containers as defined in fig.yml ***"
    fig build
    echo "*** bring up all docker containers as defined in fig.yml ***"
    fig up -d;
else
    echo "*** found ${DC_VER} installed ***"
    echo "*** build docker containers as defined in docker-compose.yml ***"
    docker-compose build
    echo "*** bring up all docker containers as defined in docker-compose.yml ***"
    docker-compose up -d;
fi

# load pg.development.sql into postgis database
echo "*** load clean pg.development.sql database from the running hydroshare container ***"
CID=$(docker ps -a | grep hydroshare_hydroshare_1 | cut -d ' ' -f 1)
echo "*** drop existing database ***"
docker exec $CID dropdb -U postgres -h postgis postgres
echo "*** create new database ***"
docker exec $CID createdb -U postgres -h postgis postgres
echo "*** create POSTGIS extension ***"
docker exec $CID psql -U postgres -h postgis -w -c 'create extension postgis;'
if [ $1 ];
    then
        echo "*** load database with contents of ${1} ***"
        docker exec $CID psql -U postgres -h postgis -f ${1};
    else
        echo "*** load database with contents of pg.development.sql ***"
        docker exec $CID psql -U postgres -h postgis -f pg.development.sql;
fi
echo "*** mangae.py collectstatic ***"
docker exec $CID python manage.py collectstatic -v0 --noinput
echo "*** manage.py makemigrations ***"
docker exec $CID python manage.py makemigrations
echo "*** manage.py migrate ***"
docker exec $CID python manage.py migrate

echo "*** FINISHED SCRIPT deploy-hs ***"
exit;