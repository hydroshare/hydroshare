#!/usr/bin/env bash

# hsctl
# HydroShare Control Script
# Author: Michael Stealey <michael.j.stealey@gmail.com>

### Local Config ###
CONFIG_DIRECTORY='./config'
CONFIG_FILE=${CONFIG_DIRECTORY}'/hydroshare-config.yaml'
HOME_DIR=${PWD}

# Read hydroshare-config.yaml into environment
sed -e "s/:[^:\/\/]/=/g;s/$//g;s/ *=/=/g" $CONFIG_FILE > $CONFIG_DIRECTORY/hydroshare-config.sh
sed -i 's/#.*$//' $CONFIG_DIRECTORY/hydroshare-config.sh
sed -i '/^\s*$/d' $CONFIG_DIRECTORY/hydroshare-config.sh
while read line; do export $line; done < <(cat $CONFIG_DIRECTORY/hydroshare-config.sh)

### Docker Variables ###
HS_DOCKER_CONTAINERS=(hydroshare dockerworker defaultworker)
HS_DOCKER_IMAGES=(hydroshare_hydroshare hydroshare_dockerworker hydroshare_defaultworker)
OTHER_DOCKER_CONTAINERS=(postgis rabbitmq redis solr)

### Pre-flight Variables ###
DEV_SERVER='python manage.py runserver 0.0.0.0:8000'
PROD_SERVER='uwsgi --ini emperor.ini'

display_usage() {
	echo "*** HydroShare Control script ***"
	echo "usage: $0 loaddb          # loads database specified in hydroshare-config.yaml into running container"
	echo "usage: $0 managepy [args] # use the arguments in a manage.py [args] call from the hydroshare container"
	echo "usage: $0 maint_off       # removes maintenance page (only if USE_NGINX = true)"
	echo "usage: $0 maint_on        # displays maintenance page (only if USE_NGINX = true)"
	echo "usage: $0 rebuild         # deletes hydroshare container contents only and deploys using exsiting database"
	echo "usage: $0 rebuild --db    # deletes all database and container contents and deploys from scratch"
	echo "usage: $0 rebuild_index   # rebuild solr index in a non-interactive way"
	echo "usage: $0 reset_all       # remove all data, containers and images that were previously deployed"
	echo "usage: $0 restart         # restarts the hydroshare container without rebuilding"
	echo "usage: $0 start           # attempts to start all containers"
	echo "usage: $0 stop            # stops all running containers"
	echo "usage: $0 update_index    # update solr index in a non-interactive way to be run as a cron job"
}

start_nginx() {
    echo "*** START NGINX ***"
    cd $NGINX_DIR
    ./run-nginx start
    cd -
}

stop_nginx() {
    echo "*** STOP NGINX ***"
    cd $NGINX_DIR
    ./run-nginx stop
    cd -
}

restart_hs() {
    echo "*** ${1^^} ***"
    stop_nginx
    preflight_hs
    docker-compose stop hydroshare
    docker-compose stop defaultworker
    delete_celerybeat_scheduler
    docker-compose start hydroshare
    docker-compose start defaultworker
    if [ "${USE_NGINX,,}" = true ]; then
        start_nginx
    fi
}

maint_on_hs() {
    if [ "${USE_NGINX,,}" = true ]; then
        cd $NGINX_DIR
        ./run-nginx maint_on
        cd -
    else
        echo "*** Unable to apply: USE_NGINX = ${USE_NGINX} ***"
    fi
}

maint_off_hs() {
    if [ "${USE_NGINX,,}" = true ]; then
        cd $NGINX_DIR
        ./run-nginx maint_off
        cd -
    else
        echo "*** Unable to apply: USE_NGINX = ${USE_NGINX} ***"
    fi
}

solr_schema_hs() {
    echo
    echo "*** Setting up solr schema ***"
    echo "*** From hydroshare: build_solr_schema ***"
    docker exec hydroshare python manage.py build_solr_schema -f schema.xml
    sleep 1s
    echo "*** From solr: mv schema.xml to /opt/solr/example/solr/collection1/conf/ ***"
    docker exec solr cp /hydroshare/schema.xml /opt/solr/example/solr/collection1/conf/schema.xml
}

start_hs() {
    echo "*** ${1^^}: all docker containers ***"
    preflight_hs
    for f in "${OTHER_DOCKER_CONTAINERS[@]}"; do
        docker-compose start $f;
    done
    for f in "${HS_DOCKER_CONTAINERS[@]}"; do
        docker-compose start $f;
    done
    if [ "${USE_NGINX,,}" = true ]; then
        start_nginx
    fi
}

stop_hs() {
    echo "*** ${1^^}: all running docker containers ***"
    if [ "${USE_NGINX,,}" = true ]; then
        stop_nginx;
    fi
    for f in "${HS_DOCKER_CONTAINERS[@]}"; do
        CHECK_HS_DOCKER_CID=`docker-compose ps | tr -s ' ' | grep ${f} | cut -d ' ' -f 1`
        if [[ -n "${CHECK_HS_DOCKER_CID}" ]]; then
            docker-compose stop $f;
        fi
    done
    for f in "${OTHER_DOCKER_CONTAINERS[@]}"; do
        CHECK_HS_OTHER_CID=`docker-compose ps | tr -s ' ' | grep ${f} | cut -d ' ' -f 1`
        if [[ -n "${CHECK_HS_OTHER_CID}" ]]; then
            docker-compose stop $f;
        fi
    done
    delete_celerybeat_scheduler
}

preflight_hs() {
    yes | cp -rf ${HS_PATH}/docker-compose.template ${HS_PATH}/docker-compose.yml
    sed -i 's!HS_PATH!'${HS_PATH}'!g' ${HS_PATH}/docker-compose.yml
    sed -i 's!HS_LOG_FILES!'${HS_LOG_FILES}'!g' ${HS_PATH}/docker-compose.yml
    if [ "${USE_NGINX,,}" = true ]; then
        echo "*** Using nginx: USE_NGINX = ${USE_NGINX} ***"
        # create hs-certs directory if it doesn't exist
        if [[ ! -d ${HOST_SSL_DIR} ]]; then
            echo "*** creating directory: ${HOST_SSL_DIR} ***"
            mkdir ${HOST_SSL_DIR};
        fi
        if [[ ! -d ${HS_LOG_FILES} ]]; then
            echo "*** creating directory: ${HS_LOG_FILES} ***"
            mkdir ${HS_LOG_FILES};
        fi
        # generate nginx configuration file
        if [ "${USE_SSL,,}" = true ]; then
            echo "*** Using SSL: USE_SSL = ${USE_SSL} ***"
            # copy ssl cert and ssl key to hs-certs directory
            yes | cp -rf ${SSL_CERT_DIR}/${SSL_CERT_FILE} ${HOST_SSL_DIR}
            yes | cp -rf ${SSL_CERT_DIR}/${SSL_KEY_FILE} ${HOST_SSL_DIR}
            # disable SSH server from running
            sed -i 's!'"/usr/sbin/sshd"'!'"# REMOVED SSH COMPONENT"'!g' ${HS_PATH}/init;
        else
            echo "*** Not using SSL: USE_SSL = ${USE_SSL} ***"
        fi
        # use production server to run HydroShare
        sed -i 's/'"${DEV_SERVER}"'/'"${PROD_SERVER}"'/g' ${HS_PATH}/init;
    else
        echo "*** Not using nginx: USE_NGINX = ${USE_NGINX} ***"
        # use development server to run HydroShare
        sed -i 's/'"${PROD_SERVER}"'/'"${DEV_SERVER}"'/g' ${HS_PATH}/init;
    fi
}

delete_celerybeat_scheduler() {
    file1="celerybeat.pid"
    file2="celery/*"
    if [ -f $file1 ] ; then
        rm -f $file1
        rm -rf $file2
    fi
}

rebuild_nodb_hs() {
    echo "*** ${1^^} *** "
    stop_hs STOP
    preflight_hs
    echo "*** REMOVE: all hydroshare docker containers (preserves exiting database contents)  ***"
    for f in "${HS_DOCKER_CONTAINERS[@]}"; do
        CHECK_HS_DOCKER_CID=`docker-compose ps | tr -s ' ' | grep ${f} | cut -d ' ' -f 1`
        if [[ -n "${CHECK_HS_DOCKER_CID}" ]]; then
            docker-compose rm -f $f;
        fi
    done
    sleep 1s
    echo "*** REMOVE: all hydroshare docker images  ***"
    for f in "${HS_DOCKER_IMAGES[@]}"; do
        docker rmi -f $f;
    done

    delete_celerybeat_scheduler

    sleep 1s
    # bring up all docker containers
    echo "*** bring up all docker containers as defined in docker-compose.yml ***"
    docker-compose up -d
    # allow containers to start
    echo "*** allowing containers to start up ***"
    for pc in $(seq 10 -1 1); do
        echo -ne "$pc ...\033[0K\r"
        sleep 1
    done
    sleep 3s
    solr_schema_hs
    sleep 2s
    rebuild_solr_index
    sleep 2s
    docker exec $CID curl "solr:8983/solr/admin/cores?action=RELOAD&core=collection1"
    sleep 2s
    rebuild_solr_index
    if [ "${USE_NGINX,,}" = true ]; then
        start_nginx
    fi
}

loaddb_hs() {
    echo "*** ${1^^} ***"
    echo "*** load clean pg.development.sql database from the running hydroshare container ***"
    CID=$(docker-compose ps | grep hydroshare | cut -d ' ' -f 1)
    echo "*** drop existing database ***"
    docker exec $CID dropdb -U postgres -h postgis postgres
    echo "*** create new database ***"
    docker exec $CID createdb -U postgres -h postgis postgres --encoding UNICODE --template=template0
    echo "*** create POSTGIS extension ***"
    docker exec $CID psql -U postgres -h postgis -w -c 'create extension postgis;'
    echo "*** load database with contents of ${HS_DATABASE} ***"
    docker exec $CID psql -U postgres -h postgis -f ${HS_DATABASE}
    echo "*** manage.py collectstatic ***"
    docker exec $CID python manage.py collectstatic -v0 --noinput
    #echo "*** manage.py makemigrations ***"
    #docker exec $CID python manage.py makemigrations
    echo "*** manage.py migrate ***"
    docker exec $CID python manage.py migrate
    echo "*** manage.py fix_permissions ***"
    docker exec $CID python manage.py fix_permissions
    sleep 3s
    solr_schema_hs
    sleep 2s
    rebuild_solr_index
    sleep 2s
    docker exec $CID curl "solr:8983/solr/admin/cores?action=RELOAD&core=collection1"
    sleep 2s
    rebuild_solr_index
}

rebuild_db_hs() {
    echo "*** ${1^^} ***"
    stop_hs STOP
    preflight_hs
    echo "*** REMOVE: all docker containers (deletes existing database)  ***"
    for f in "${HS_DOCKER_CONTAINERS[@]}"; do
        CHECK_HS_DOCKER_CID=`docker-compose ps | tr -s ' ' | grep ${f} | cut -d ' ' -f 1`
        if [[ -n "${CHECK_HS_DOCKER_CID}" ]]; then
            docker-compose rm -f $f;
        fi
    done
    sleep 1s
    for f in "${OTHER_DOCKER_CONTAINERS[@]}"; do
        CHECK_HS_OTHER_CID=`docker-compose ps | tr -s ' ' | grep ${f} | cut -d ' ' -f 1`
        if [[ -n "${CHECK_HS_OTHER_CID}" ]]; then
            docker-compose rm -f $f;
        fi
    done
    sleep 1s
    echo "*** REMOVE: all hydroshare docker images  ***"
    for f in "${HS_DOCKER_IMAGES[@]}"; do
        CHECK_HS_DOCKER_IMG=`docker images | tr -s ' ' | grep ${f} | cut -d ' ' -f 1`
        if [[ -n "${CHECK_HS_DOCKER_IMG}" ]]; then
            docker rmi -f $f;
        fi
    done

    delete_celerybeat_scheduler

    sleep 1s
    # get submodules
    echo "*** get git submodules ***"
    git submodule init && git submodule update
    # build docker containers
    echo "*** build docker containers as defined in docker-compose.yml ***"
    docker-compose build
    # bring up all docker containers
    echo "*** bring up all docker containers as defined in docker-compose.yml ***"
    docker-compose up -d
    # allow containers to start
    echo "*** allowing containers to start up ***"
    for pc in $(seq 10 -1 1); do
        echo -ne "$pc ...\033[0K\r"
        sleep 1
    done
    echo
    loaddb_hs LOADDB
    if [ "${USE_NGINX,,}" = true ]; then
        start_nginx
    fi
}

rebuild_hs() {
	if [ "$2" == "--db" ]
	then
		rebuild_db_hs $1
	else
		rebuild_nodb_hs $1
	fi
}

manage_py_hs() {
    docker exec -ti hydroshare python manage.py "${@:2}"
}

update_solr_index() {
    docker exec hydroshare python manage.py update_index
}

rebuild_solr_index() {
    docker exec hydroshare python manage.py rebuild_index --noinput
}

reset_all_hs() {
    echo "*** WARNING: All data, containers, and hydroshare related images will be removed ***"
    if [[ "$(docker-compose ps | grep hydroshare)" ]]; then
        echo "*** INFO: HydroShare found previously running, proceeding with clean up ***"
        # Remove root items
        scripts/pre-remove-hs;
    else
        echo "*** WARNING: Could not find a running instance of HydroShare ***"
        echo "*** WARNING: Attempting cleanup anyway ***";
    fi
    # Stopping all running docker containers
    stop_hs STOP
    echo "*** INFO: Removing all docker containers ***"
    docker-compose rm -f
    echo "*** INFO: Removing hydroshare related images ***"
    while read line; do docker rmi -f $line; done < <(docker images | grep "^hydroshare_" | tr -s ' ' | cut -d ' ' -f 3)
    echo "*** INFO: Removing static directory ***"
    if [[ -d hydroshare/static ]]; then
        echo "INFO: Found hydroshare/static directory, attempting to remove ***"
        rm -rf hydroshare/static;
    fi
    if [[ -f root-items.txt ]]; then
        echo "INFO: Found root-items.txt file, attempting to remove ***"
        rm root-items.txt;
    fi
}

### Display usage if exactly one argument is not provided ###
if [  $# -ne 1 ]
then
	if [ $1 != "rebuild" ] || [ $2 != "--db" ] && [ $1 != "managepy" ]
	then
	    display_usage
	    exit 1
	fi
fi

case "$1" in
    loaddb) loaddb_hs $1
        ;;
    managepy) manage_py_hs "$@"
        ;;
    update_index) update_solr_index $1
        ;;
    rebuild_index) rebuild_solr_index $1
        ;;
    maint_off) maint_off_hs $1
        ;;
    maint_on) maint_on_hs $1
        ;;
    rebuild) rebuild_hs $1 $2
        ;;
    reset_all) reset_all_hs $1
        ;;
    restart) restart_hs $1
        ;;
    start) start_hs $1
        ;;
    stop) stop_hs $1
        ;;
    *) display_usage
        ;;
esac

exit 0;
