name: Test HydroShare Pull Requests

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: 
      - '**'
  workflow_dispatch:

jobs:
  hydroshare-pull-request-tests:

    runs-on: ubuntu-latest

    services:
      postgis:
        image: postgis/postgis:latest  # Using postgis image for the database
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        options: >-
          --health-cmd="pg_isready -U postgres -d postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

      pgbouncer:
        image: edoburu/pgbouncer:latest
        container_name: pgbouncer
        environment:
          DB_HOST: postgis
          DB_USER: "postgres"
          DB_PASSWORD: "postgres"
          DB_NAME: "postgres"
          DB_PORT: 5432
          LISTEN_ADDR: "*"
          LISTEN_PORT: 6432
          POOL_MODE: "transaction"
          AUTH_TYPE: "plain"
          MAX_CLIENT_CONN: 10
          DEFAULT_POOL_SIZE: 5
          MIN_POOL_SIZE: 2
        ports:
          - "6432:6432"
        depends_on:
          - postgis
        options: >-
          --health-cmd="pgbouncer -q"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
    - uses: actions/checkout@v4

    - name: Run flake8
      run: |
        python -m pip install flake8
        ./run-pylint-jenkins

    - name: Install Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose

    - name: Setup HydroShare
      run: |
        printf "%s\n" c | ./local-dev-first-start-only.sh

    - name: Run HydroShare Tests
      env:
        DATABASE_URL: postgres://postgres:postgres@pgbouncer:6432/postgres
      run: |
        docker exec hydroshare ./run-tests-jenkins

    - name: Publish Test Results
      uses: EnricoMi/publish-unit-test-result-action/linux@v2
      if: always()
      with:
        files: |
          nosetests.xml
          pytests.xml

    # archive the test results
    - name: Archive Test Results
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: |
          nosetests.xml
          pytests.xml
          coverage.xml
