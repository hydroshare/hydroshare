name: MinIO Sync: Prod to Beta

on:
  workflow_dispatch:
    inputs:
      resource_ids:
        description: 'Comma-separated list of resource IDs to check and sync'
        required: true

jobs:
  check-and-sync:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Install MinIO CLI (mc)
      run: |
        curl -O https://dl.min.io/client/mc/release/linux-amd64/mc
        chmod +x mc
        sudo mv mc /usr/local/bin/mc

    - name: Create MinIO Config File
      env:
        MINIO_PROD_URL: ${{ secrets.MINIO_PROD_URL }}
        MINIO_BETA_URL: ${{ secrets.MINIO_BETA_URL }}
        MINIO_PROD_ACCESS_KEY: ${{ secrets.MINIO_PROD_ACCESS_KEY }}
        MINIO_PROD_SECRET_KEY: ${{ secrets.MINIO_PROD_SECRET_KEY }}
        MINIO_BETA_ACCESS_KEY: ${{ secrets.MINIO_BETA_ACCESS_KEY }}
        MINIO_BETA_SECRET_KEY: ${{ secrets.MINIO_BETA_SECRET_KEY }}
      run: |
        cat <<EOF > minio_config.json
        {
          "prod": {
            "url": "$MINIO_PROD_URL",
            "access_key": "$MINIO_PROD_ACCESS_KEY",
            "secret_key": "$MINIO_PROD_SECRET_KEY"
          },
          "beta": {
            "url": "$MINIO_BETA_URL",
            "access_key": "$MINIO_BETA_ACCESS_KEY",
            "secret_key": "$MINIO_BETA_SECRET_KEY"
          }
        }
        EOF

    - name: Set Up MinIO Aliases Using Config File
      run: |
        CONFIG=$(cat minio_config.json)
        PROD_URL=$(echo $CONFIG | jq -r '.prod.url')
        PROD_ACCESS_KEY=$(echo $CONFIG | jq -r '.prod.access_key')
        PROD_SECRET_KEY=$(echo $CONFIG | jq -r '.prod.secret_key')

        BETA_URL=$(echo $CONFIG | jq -r '.beta.url')
        BETA_ACCESS_KEY=$(echo $CONFIG | jq -r '.beta.access_key')
        BETA_SECRET_KEY=$(echo $CONFIG | jq -r '.beta.secret_key')

        mc alias set prod $PROD_URL $PROD_ACCESS_KEY $PROD_SECRET_KEY
        mc alias set beta $BETA_URL $BETA_ACCESS_KEY $BETA_SECRET_KEY

    - name: Retrieve and Sync Buckets
      env:
        RESOURCE_IDS: ${{ github.event.inputs.resource_ids }}
        ADMIN_AUTH: ${{ secrets.ADMIN_AUTH }}
      run: |
        echo "Processing resource IDs: $RESOURCE_IDS"
        IFS=',' read -ra RESOURCES <<< "$RESOURCE_IDS"

        for RESOURCE_ID in "${RESOURCES[@]}"; do
          echo "Fetching bucket name for resource: $RESOURCE_ID"
          
          # Fetch the bucket name using the API
          BUCKET_NAME=$(curl -s -X GET "https://beta.hydroshare.org/hsapi/resource/$RESOURCE_ID/quota_holder_bucket_name/" \
          -H "accept: application/json" \
          -H "authorization: Basic $ADMIN_AUTH")

          if [ -z "$BUCKET_NAME" ] || [ "$BUCKET_NAME" == "null" ]; then
            echo "Error: Could not fetch bucket name for resource $RESOURCE_ID"
            continue
          fi

          echo "Bucket name for resource $RESOURCE_ID is $BUCKET_NAME"

          # Ensure the bucket exists on the target
          echo "Ensuring bucket $BUCKET_NAME exists on the target MinIO server..."
          mc mb --ignore-existing beta/$BUCKET_NAME

          # Sync the bucket
          echo "Syncing bucket $BUCKET_NAME from prod to beta..."
          mc mirror --remove --overwrite prod/$BUCKET_NAME beta/$BUCKET_NAME
          echo "Sync for bucket $BUCKET_NAME completed successfully."
        done

    - name: Clean Up
      run: |
        rm -f minio_config.json